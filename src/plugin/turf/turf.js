!function(r){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).turf=r()}}(function(){return function(){return function r(e,t,n){function o(a,s){if(!t[a]){if(!e[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var f=new Error("Cannot find module '"+a+"'");throw f.code="MODULE_NOT_FOUND",f}var d=t[a]={exports:{}};e[a][0].call(d.exports,function(r){return o(e[a][1][r]||r)},d,d.exports,r,e,t,n)}return t[a].exports}for(var i="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}}()({1:[function(r,e,t){"use strict";function n(r){return r&&"object"==typeof r&&"default"in r?r.default:r}function o(r,e,t){if(t=t||{},!u.isObject(t))throw new Error("options is invalid");var n;if("Feature"===r.type)n=r.geometry.coordinates;else{if("LineString"!==r.type)throw new Error("input must be a LineString Feature or Geometry");n=r.coordinates}if(!u.isNumber(e))throw new Error("distance must be a number");for(var o=0,f=0;f<n.length&&!(e>=o&&f===n.length-1);f++){if(o>=e){var d=e-o;if(d){var h=i(n[f],n[f-1])-180;return a(n[f],d,h,t)}return u.point(n[f])}o+=s(n[f],n[f+1],t)}return u.point(n[n.length-1])}var i=n(r("@turf/bearing")),a=n(r("@turf/destination")),s=n(r("@turf/distance")),u=r("@turf/helpers");e.exports=o,e.exports.default=o},{"@turf/bearing":2,"@turf/destination":3,"@turf/distance":4,"@turf/helpers":5}],2:[function(r,e,t){"use strict";function n(r,e,t){if(t=t||{},!i.isObject(t))throw new Error("options is invalid");if(!0===t.final)return function(r,e){var t=n(e,r);return t=(t+180)%360}(r,e);var a=o.getCoord(r),s=o.getCoord(e),u=i.degreesToRadians(a[0]),f=i.degreesToRadians(s[0]),d=i.degreesToRadians(a[1]),h=i.degreesToRadians(s[1]),c=Math.sin(f-u)*Math.cos(h),w=Math.cos(d)*Math.sin(h)-Math.sin(d)*Math.cos(h)*Math.cos(f-u);return i.radiansToDegrees(Math.atan2(c,w))}var o=r("@turf/invariant"),i=r("@turf/helpers");e.exports=n,e.exports.default=n},{"@turf/helpers":5,"@turf/invariant":6}],3:[function(r,e,t){"use strict";function n(r,e,t,n){if(n=n||{},!i.isObject(n))throw new Error("options is invalid");var a=n.units,s=n.properties,u=o.getCoord(r),f=i.degreesToRadians(u[0]),d=i.degreesToRadians(u[1]),h=i.degreesToRadians(t),c=i.lengthToRadians(e,a),w=Math.asin(Math.sin(d)*Math.cos(c)+Math.cos(d)*Math.sin(c)*Math.cos(h)),l=f+Math.atan2(Math.sin(h)*Math.sin(c)*Math.cos(d),Math.cos(c)-Math.sin(d)*Math.sin(w)),m=i.radiansToDegrees(l),g=i.radiansToDegrees(w);return i.point([m,g],s)}var o=r("@turf/invariant"),i=r("@turf/helpers");e.exports=n,e.exports.default=n},{"@turf/helpers":5,"@turf/invariant":6}],4:[function(r,e,t){"use strict";function n(r,e,t){if(t=t||{},!i.isObject(t))throw new Error("options is invalid");var n=t.units,a=o.getCoord(r),s=o.getCoord(e),u=i.degreesToRadians(s[1]-a[1]),f=i.degreesToRadians(s[0]-a[0]),d=i.degreesToRadians(a[1]),h=i.degreesToRadians(s[1]),c=Math.pow(Math.sin(u/2),2)+Math.pow(Math.sin(f/2),2)*Math.cos(d)*Math.cos(h);return i.radiansToLength(2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c)),n)}var o=r("@turf/invariant"),i=r("@turf/helpers");e.exports=n,e.exports.default=n},{"@turf/helpers":5,"@turf/invariant":6}],5:[function(r,e,t){"use strict";function n(r,e,t){if(!m(t=t||{}))throw new Error("options is invalid");var n=t.bbox,o=t.id;if(void 0===r)throw new Error("geometry is required");if(e&&e.constructor!==Object)throw new Error("properties must be an Object");n&&g(n),o&&y(o);var i={type:"Feature"};return o&&(i.id=o),n&&(i.bbox=n),i.properties=e||{},i.geometry=r,i}function o(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!l(r[0])||!l(r[1]))throw new Error("coordinates must contain numbers");return n({type:"Point",coordinates:r},e,t)}function i(r,e,t){if(!r)throw new Error("coordinates is required");for(var o=0;o<r.length;o++){var i=r[o];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var a=0;a<i[i.length-1].length;a++){if(0===o&&0===a&&!l(i[0][0])||!l(i[0][1]))throw new Error("coordinates must contain numbers");if(i[i.length-1][a]!==i[0][a])throw new Error("First and last Position are not equivalent.")}}return n({type:"Polygon",coordinates:r},e,t)}function a(r,e,t){if(!r)throw new Error("coordinates is required");if(r.length<2)throw new Error("coordinates must be an array of two or more positions");if(!l(r[0][1])||!l(r[0][1]))throw new Error("coordinates must contain numbers");return n({type:"LineString",coordinates:r},e,t)}function s(r,e){if(!m(e=e||{}))throw new Error("options is invalid");var t=e.bbox,n=e.id;if(!r)throw new Error("No features passed");if(!Array.isArray(r))throw new Error("features must be an Array");t&&g(t),n&&y(n);var o={type:"FeatureCollection"};return n&&(o.id=n),t&&(o.bbox=t),o.features=r,o}function u(r,e,t){if(!r)throw new Error("coordinates is required");return n({type:"MultiLineString",coordinates:r},e,t)}function f(r,e,t){if(!r)throw new Error("coordinates is required");return n({type:"MultiPoint",coordinates:r},e,t)}function d(r,e,t){if(!r)throw new Error("coordinates is required");return n({type:"MultiPolygon",coordinates:r},e,t)}function h(r,e){if(null==r)throw new Error("radians is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=p[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r*t}function c(r,e){if(null==r)throw new Error("distance is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=p[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r/t}function w(r){if(null==r)throw new Error("radians is required");return r%(2*Math.PI)*180/Math.PI}function l(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}function m(r){return!!r&&r.constructor===Object}function g(r){if(!r)throw new Error("bbox is required");if(!Array.isArray(r))throw new Error("bbox must be an Array");if(4!==r.length&&6!==r.length)throw new Error("bbox must be an Array of 4 or 6 numbers");r.forEach(function(r){if(!l(r))throw new Error("bbox must only contain numbers")})}function y(r){if(!r)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string")}Object.defineProperty(t,"__esModule",{value:!0});var p={meters:6371008.8,metres:6371008.8,millimeters:6371008800,millimetres:6371008800,centimeters:637100880,centimetres:637100880,kilometers:6371.0088,kilometres:6371.0088,miles:3958.761333810546,nauticalmiles:6371008.8/1852,inches:39.37*6371008.8,yards:6371008.8/1.0936,feet:20902260.511392,radians:1,degrees:6371008.8/111325},b={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/6371008.8,degrees:1/111325},E={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};t.earthRadius=6371008.8,t.factors=p,t.unitsFactors=b,t.areaFactors=E,t.feature=n,t.geometry=function(r,e,t){if(!m(t=t||{}))throw new Error("options is invalid");var n,s=t.bbox;if(!r)throw new Error("type is required");if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");switch(s&&g(s),r){case"Point":n=o(e).geometry;break;case"LineString":n=a(e).geometry;break;case"Polygon":n=i(e).geometry;break;case"MultiPoint":n=f(e).geometry;break;case"MultiLineString":n=u(e).geometry;break;case"MultiPolygon":n=d(e).geometry;break;default:throw new Error(r+" is invalid")}return s&&(n.bbox=s),n},t.point=o,t.points=function(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return s(r.map(function(r){return o(r,e)}),t)},t.polygon=i,t.polygons=function(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return s(r.map(function(r){return i(r,e)}),t)},t.lineString=a,t.lineStrings=function(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return s(r.map(function(r){return a(r,e)}),t)},t.featureCollection=s,t.multiLineString=u,t.multiPoint=f,t.multiPolygon=d,t.geometryCollection=function(r,e,t){if(!r)throw new Error("geometries is required");if(!Array.isArray(r))throw new Error("geometries must be an Array");return n({type:"GeometryCollection",geometries:r},e,t)},t.round=function(r,e){if(null==r||isNaN(r))throw new Error("num is required");if(e&&!(e>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,e||0);return Math.round(r*t)/t},t.radiansToLength=h,t.lengthToRadians=c,t.lengthToDegrees=function(r,e){return w(c(r,e))},t.bearingToAzimuth=function(r){if(null==r)throw new Error("bearing is required");var e=r%360;return e<0&&(e+=360),e},t.radiansToDegrees=w,t.degreesToRadians=function(r){if(null==r)throw new Error("degrees is required");return r%360*Math.PI/180},t.convertLength=function(r,e,t){if(null==r)throw new Error("length is required");if(!(r>=0))throw new Error("length must be a positive number");return h(c(r,e),t||"kilometers")},t.convertArea=function(r,e,t){if(null==r)throw new Error("area is required");if(!(r>=0))throw new Error("area must be a positive number");var n=E[e||"meters"];if(!n)throw new Error("invalid original units");var o=E[t||"kilometers"];if(!o)throw new Error("invalid final units");return r/n*o},t.isNumber=l,t.isObject=m,t.validateBBox=g,t.validateId=y,t.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},t.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},t.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},t.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},t.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},t.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},t.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}},{}],6:[function(r,e,t){"use strict";function n(r){if(!r)throw new Error("obj is required");var e;if(r.length?e=r:r.coordinates?e=r.coordinates:r.geometry&&r.geometry.coordinates&&(e=r.geometry.coordinates),e)return o(e),e;throw new Error("No valid coordinates")}function o(r){if(r.length>1&&i.isNumber(r[0])&&i.isNumber(r[1]))return!0;if(Array.isArray(r[0])&&r[0].length)return o(r[0]);throw new Error("coordinates must only contain numbers")}Object.defineProperty(t,"__esModule",{value:!0});var i=r("@turf/helpers");t.getCoord=function(r){if(!r)throw new Error("obj is required");var e=n(r);if(e.length>1&&i.isNumber(e[0])&&i.isNumber(e[1]))return e;throw new Error("Coordinate is not a valid Point")},t.getCoords=n,t.containsNumber=o,t.geojsonType=function(r,e,t){if(!e||!t)throw new Error("type and name required");if(!r||r.type!==e)throw new Error("Invalid input to "+t+": must be a "+e+", given "+r.type)},t.featureOf=function(r,e,t){if(!r)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!r||"Feature"!==r.type||!r.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!r.geometry||r.geometry.type!==e)throw new Error("Invalid input to "+t+": must be a "+e+", given "+r.geometry.type)},t.collectionOf=function(r,e,t){if(!r)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!r||"FeatureCollection"!==r.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var n=0;n<r.features.length;n++){var o=r.features[n];if(!o||"Feature"!==o.type||!o.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!o.geometry||o.geometry.type!==e)throw new Error("Invalid input to "+t+": must be a "+e+", given "+o.geometry.type)}},t.getGeom=function(r){if(!r)throw new Error("geojson is required");if(void 0!==r.geometry)return r.geometry;if(r.coordinates||r.geometries)return r;throw new Error("geojson must be a valid Feature or Geometry Object")},t.getGeomType=function(){throw new Error("invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType")},t.getType=function(r,e){if(!r)throw new Error((e||"geojson")+" is required");if(r.geometry&&r.geometry.type)return r.geometry.type;if(r.type)return r.type;throw new Error((e||"geojson")+" is invalid")}},{"@turf/helpers":5}],7:[function(r,e,t){e.exports={along:r("@turf/along"),helpers:r("@turf/helpers")}},{"@turf/along":1,"@turf/helpers":5}]},{},[7])(7)});
